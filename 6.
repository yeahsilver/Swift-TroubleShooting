# Suspend 상태에서 위치 추적하기

담당자: ella Heo
태그: iOS

<aside>
💡 **엘라의 개발 탐험 문서 (해당 문제를 해결하기 위해 시도해본 것)**
[Suspend 상태에서도 위치 추적을 할 수 있는 방법은 무엇일까?](https://www.notion.so/Suspend-41b6555f91d34ab1ad73384bd4f1f538)

</aside>

📍**목차📍**

---

### 1. 개요

해당 문서는 iOS 환경에서 suspend시 위치 추적 기능을 구현하기 위해 시도한 여러가지 방식이 기재되어있습니다. 해당 문서는 suspend시 위치 추적을 진행하는 로직의 어려움과 이를 해결하기 위해 사용한 iOS built-in 프레임워크 **CoreLocation**의 일부 기능인 **Geo Fencing** 을 통한 suspend시 위치 추적 구현 방식에 대해 설명합니다.

### 2. 문맥

- Foreground /Background 상태를 가지고 있는 경우 위치 추적이 정상적으로 이루어지지만 **suspend 상태에서는 정상적으로 위치 추적이 불가한 문제**를 직면하였습니다.
    
    여기서 Foreground 상태는 앱 화면이 기기에 출력되는 상태, Background 상태는 앱 화면이 기기에 출력 되지 않지만 앱 실행 리스트에  존재하는 상태, 그리고 suspend 상태는 앱이 완전히 죽은 상태를 말합니다.
    
- “Wolley” 플랫폼은 사용자의 **위치 정보를 기반**으로 시간표를 그려주고, 사용자가 머문 장소, 그리고 사용자의 이동 동선을 제공하여 사용자가 해당 정보를 가시적으로 보여주는 기능이 필요하기에, suspend 상태에서도 위치 추적이 가능해야합니다.
- Suspend 시에도 위치 추적이 가능함을 테스트하기 위해서는 **디버그 상태의 앱을 완전히 죽은 상태의 환경**으로 만든고 해당 기기를 가지고 위치를 이동할 시 특정 범위(약 200m)를 넘을 경우 아래와 같은 알람이 출력된다면 테스트가 성공한 것을 의미합니다.
    
    ![KakaoTalk_Photo_2022-02-24-15-40-17.jpeg](Suspend%20%E1%84%89%E1%85%A1%2027e45/KakaoTalk_Photo_2022-02-24-15-40-17.jpeg)
    

### 3. 목표

- 앱의 상태가 어떻던지 간에 사용자의 동선을 정확하게 추적해 하루의 동선을 그려주고, 사용자가 머문 장소, 그리고 사용자의 이동 동선 기능을 제공함으로써 **“자동으로 기록되는 내 삶"이라는 가치를 사용자에게 부여**합니다.
- suspend 시 위치 추적 성공 여부를 측정하기 위해 위치 데이터를 전송하는 서버 경로인 /path/daily 부분에서 엘라의 동선 데이터를 json 형태로 획득하여 지도뷰에 해당 좌표를 핀으로 출력한 후, **엘라의 동선과 일치하면 위치 추적 성공**으로 간주하였습니다.
    
    ![KakaoTalk_Photo_2022-02-24-16-06-40.png](Suspend%20%E1%84%89%E1%85%A1%2027e45/KakaoTalk_Photo_2022-02-24-16-06-40.png)
    

### 4. 해당 기술 구현이 어려운 이유

- 기존에 존재하는 위치 기반 서비스들은 모두 foreground와 background 처리만 되어있는 경우가 대다수였습니다.
    - 기본적으로 위치 추적 기능을 수행할 때, Core Location의 기능인 **Standard Location Service**를 사용하면 사용자의 위치 서비스를 실시간으로 활용할 수 있습니다.
        
        ![스크린샷 2022-02-26 오후 3.10.55.png](Suspend%20%E1%84%89%E1%85%A1%2027e45/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-02-26_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_3.10.55.png)
        
    - 여기서 Stanard Location Service는 사용자의 위치 정보를 **실시간 (Real time)**으로 받아오는 방식입니다.
    - 해당 방식은 **실시간**으로 받아오는 방식이기에, **정확한 위치 정보를 제공**합니다.
- Foreground시에는 실시간으로 위치 추적을 할 수 있는 기능 (Standard Location Service)을 제공하기에 해당 방식을 코드로 메소드화하여 해당 상태에서의 위치 추적은 쉽게 성공했으나 뷰가 실행되지 않을 시 위치 추적 적용 여부 테스팅을 수행해봤고, **테스팅을 실패**하고 말았습니다.
    - 이유를 서치해보니, Background 상태에서 실행하게 하려면 XCode에서 background mode - Location Update 부분에 대해 처리해주어야 했었기 때문이었습니다.
- 그러면 이제 background mode를 처리하면 뷰가 실행되지 않을 때에도 적용이 되겠지? 라고 해당 설정을 추가한 후 해당 경우에 위치 정보가 입력이 될까? 라는 기대를 하고 있었습니다.
    - 엘라의 출퇴근길 (동작구 상도동 ↔ 판교)를 다니며 backgroud와 suspend 상태일 떄의 위치 추적이 어떻게 되는지 측정해보았습니다. background 모드에서는 실시간으로 위치 추적 처리가 잘 되었지만, suspend 상태에서는 테스팅이 실패하였습니다.
    - 이유가 무엇인가 하였더니, Standard Location Service는 **Foreground/Background 환경에서만 돌아가는 기능**이였습니다.
- 그러면 어떻게 suspend 시에도 위치 추적을 할 수 있을까라는 의문증이 생기게 되었습니다.
- 애플 문서에서도 suspend시 위치 추적을 진행하는 예시가 존재하지 않았기에 해당 기능을 구현하며 난관에 봉착하게 되었습니다.
    
    심지어 apple commnuity 카카오톡 단체톡방에서도 질문을 던져보았으나 개발자분들이 suspend에서 기능들을 처리하는것 자체가 어렵다고 포기하라고 하셨습니다....🥲
    
- 서치해본 결과, 애플 OS 측에서 suspend시에 사용자위치를 **실시간**으로 추적하는 기능 자체를 차단하였기에, 사용자의 실시간 위치 정보는 suspend 상태에서는 제공 받을 수 없습니다.
    
    하지만 저는 포기하지 않는 열정 엘라입니다. 여러 가지 방법을 찾아 시도해보았습니다.
    

### 5. 시도한 (실패) 방식

**초기 세팅** 

App Delegate에서 Background 상태로 들어가기 

- Background 상태를 App Delegate에서 처리해서 **머물러 있는 위치에서 이동하게 되면 변화된 위치를 체크하는 방식**으로 개발을 해보면 어떨까라는 의문이 들었습니다.
    - App Delegate에서 applicationDidEnterBackground() 메소드를 추가하여 백그라운드 상태에 진입시에 **위치 모니터링 코드를 추가**합니다.
    
    ```swift
    func applicationDidEnterBackground(_ application: UIApplication) {
            print("application Did Enter Background")
            startMySignificantLocationChanges()
    }
        
    private func startMySignificantLocationChanges() {
    				// 모니터링 체크가 되어있지 않으면 위치 모니터링이 불가. 해당 부분을 처리
    	if !CLLocationManager.significantLocationChangeMonitoringAvailable() {
           print("significant location change monitoring is not availiable")
           return
      }
            
      locationSerivces.startMonitoringSignificantLocationChanges()
    }
    ```
    
- 코드는 구현 완료 하였는데.. 그러면 얘가 잘 추적되는지 확인하는 방법이 무엇일까?
    - CLLocationManager에 속해있는 `startMonitoringSignificantLocationChanges()` 메소드 사용해보자!

**startMonitoringSignificantLocationChanges() 메소드를 사용하여 위치 변경 시 노티 받기**

- **의문점**
    - 대체 몇미터를 가야 위치가 변경되었다고 인식할까?
    - suspend에서 위치 변경 여부를 처리하는데, 해당 알림은 어떤 방식으로 처리해아할까?
- suspend 상태에서도 위치 정보 추적이 잘 되고 있는지 체크 방법
    - 애플 문서 왈
        
        [Apple Developer Documentation](https://developer.apple.com/documentation/corelocation/cllocationmanager/1423531-startmonitoringsignificantlocati)
        
        - 앱이 종료 시, 새로운 이벤트가 발생하면 앱이 재실행됩니다. 여기서 app delegate의 willFinishLaunchingWithOptions, 그리고 didFinishLaunchingWithOptions에서 location 키가 넘어옵니다. (해당 메소드는 장소 변화 액션 때문에 앱이 재실행됐어!!! 라는 이벤트를 알려주는 역할입니다.)
            - 두개의 차이점은 무엇일까?
                - willFinishLaunchingWithOptions(): 앱을 초기화하고 실행 준비 (앱이 실행된 후에 storyboard 또는 nib이 로드 되고 실행) ⇒ 해당 메소드 실행 시 앱은 inactive 상태
                - didFinishLaunchingWithOptions(): 프로세스가 거의 완료되어가고 앱이 실행될 준비가 되었다는 것을 알리는 메소드
        - 그러면 키는 어디에 저장 되어 있을까?
            - `launchOptions: [UIApplication.LaunchOptionsKey: **Any**]`에 저장
                - 키에는 어떤 정보를 가지고 있을까?
                    - location 키를 어떻게 가지고 올까?
                        
                        launchOptions에는 여러가지 Key가 존재하는데, 여기서 .location의 키를 불러오면 되는 것 같다.
                        
                        (lauchOptions: 앱이 시작된 이유가 담겨있는 dictionary. 사용자가 직접 앱을 실행한 경우에는 nil값을 가지고 있습니다.)
                        
                        ```swift
                        if let location = launchOptions?[.location] as? [AnyHashable: Any] {
                        	// 코드 작성 주르르르륵
                        }
                        ```
                        
                    - 그러면 키는 어떤 정보를 가지고 있을까? 그리고 나아가 어떤 역할을 수행할까?
- suspend에서 장소가 바뀌는 것을 확인 하기 위해서는, location이 호출되었는지 확인해야합니다.
    
    여기서 location의 키를 가지고 있는 곳은 launchOptions이기에, .location에서 호출이 온다면 로컬 notification을 띄우는 형태로 일단 진행을 해보았습니다. (아니면 suspend 상태에서 해당 것이 잘 오고 있는지 확인 하기가 굉장히 어려움. 내가 컴퓨터였으면 좋겠다.) 
    
    ⇒ 백그라운드 전환시 노트 알리기 처리
    
    ⇒ 그러면 suspend시에 노티는 가능할까?
    
    ⇒ 서치 결과 되는 것 같다! location 키가 오면 변경 위치 노티 띄우도록 해서, 테스팅 필요 (1/6 집 가면서 테스팅) ⇒ **테스팅 실패**
    
    추후 개발하다 인지한 사실이지만, 실패 이유는 알람이 온 뒤, 알람을 클릭해야 로케이션 키에 맞게AppDelegate의 알림 처리 메소드를 처리하는 것을 알았고 위의 이유가 해당 기능의 실패 이유였습니다.
    

**Background Fetch로 terminated 감지 후 처리**

- UIApplicationBackgroundFetchIntervalMinimum ⇒ 위치를 저장하고 싶은 시간대를 지정해서 로컬 자체로 타이머를 걸어서 계속 Background Fetch하는 방식으로 구현하자라는 생각을 하였습니다.
    
    ⇒ 해당 메소드가 deprecated되어 구현할 수 있는 다른 방향성을 찾아보아야 했습니다.
    

### 6. 해결 방식

**(토글을 열면 자세한 코드를 보실 수 있습니다)**

- Geo fencing 기능 사용하여 suspend시 위치 추적 기능을 구현하였습니다.
- 왜 Geofencing을 선택하였는가?
    - Geo Fencing 기능은 한 위치를 핀으로 찍은 후 해당 위치에서 반경 200m 이상 벗어나면 호출해주는 기능입니다.
    - 그러면 Geo Fencing을 이용하여 반경 200m를 넘어갈 때마다 새로운 위치를 fencing해서 계속적으로 위치 추적을 진행하면 어떨까?라는 의문점이 생겼고, 바로 구현에 들어갔습니다.
- Geo Fencing 기능은 iOS의 built-in framework인 CoreLocation에서 제공을 하며, 해당 프레임워크의 `CLLocationManager`를 사용하여 해당 기능을 구현하였습니다.
- 사용자가 처음으로 SummaryView를 로딩할 시 위치 추적을 담당하는 클래스인 `LocationService` 클래스를 실행합니다. Location Service에서의 위치 추적 및 해제는 아래와 같이 구현하였습니다.
    
    **위치 추적 시작 코드**
    
    ```swift
    /// 장소 모니터링을 시작하는 함수입니다.
    func startMonitoringLocation() {
        guard let latitude = locationManager.location?.coordinate.latitude,
              let longitude = locationManager.location?.coordinate.longitude else { return }
        
        let location  = CLLocationCoordinate2D(latitude: latitude, longitude: longitude)
        
        let region = CLCircularRegion(center: location, radius: 1.0, identifier: "location")
        region.notifyOnEntry = false
        region.notifyOnExit = true
        
        locationManager.startMonitoring(for: region)
        locationManager.startUpdatingLocation()
    }
    ```
    
    **위치 추적 해제 코드**
    
    ```swift
    /// 장소 모니터링을 해제하는 함수입니다.
    func stopMonitoringLocation() {
        let monitoredRegions = locationManager.monitoredRegions
    
        for region in monitoredRegions {
            locationManager.stopMonitoring(for: region)
        }
    }
    ```
    
- 여기서 해당 앱은 suspend시에 추적되는 위치 또한 저장해야하기에, 로컬 DB built-in 프레임워크인 CoreData를 사용하여 위치 변경이 감지된 경우 로컬 기기에 데이터를 저장하였습니다.
    
    ```swift
    /// 현재 장소를 위도, 경도 형식으로 로컬 데이터베이스에 저장하는 함수입니다.
    func saveLocation() {
         let entity = NSEntityDescription.entity(forEntityName: "Location", in: self.container.viewContext)!
            
          guard let latitude = locationManager.location?.coordinate.latitude,
                  let longitude = locationManager.location?.coordinate.longitude else { return }
            
          let speed = String((locationManager.location?.speed) ?? 0)
            
          let location = NSManagedObject(entity: entity, insertInto: self.container.viewContext)
            location.setValue("\(getCurrentTime())", forKey: "time")
            location.setValue([String(latitude), String(longitude)], forKey: "coordinate")
            location.setValue(speed, forKey: "speed")
            
          do {
               try self.container.viewContext.save()
                
          } catch {
             WolleyLog.error(error.localizedDescription)
          }
      }
    ```
    

- 여기서 로컬 DB의 구조는 아래와 같습니다.
    
    ![스크린샷 2022-02-24 오후 4.28.13.png](Suspend%20%E1%84%89%E1%85%A1%2027e45/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-02-24_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_4.28.13.png)
    

- 그러면 새로운 장소에 대한 처리는 어떻게 해야하나요? 라는 물음이 생길 수 있는데 해당 부분은 아래와 같이 처리하였습니다.
    
    **위치 변경 감지 코드**
    
    ```swift
    /// 새로운 장소에 진입했을 경우 새 장소를 모니터링하는 함수입니다.
    func locationManager(_ manager: CLLocationManager, didDetermineState state: CLRegionState, for region: CLRegion) {
        switch state {
            case .inside:
                WolleyLog.debug("inside")
                break
                
            case .outside:
                WolleyLog.debug("outside")
                saveLocation()
                stopMonitoringLocation()
                startMonitoringLocation()
                break
                
            case .unknown:
                break
        }
    }
    ```
    

- 사용자가 앱을 실행할 시, 로컬 DB 에 저장되어 있던 위치 정보를 서버에 전송해야하기에, 로컬 DB의 데이터를 fetch하여 네트워크 통신 부분에 전송합니다.
    
    **로컬 DB 데이터 fetch 코드**
    
    ```swift
    /// 로컬 데이터베이스에 저장되어있는 장소 정보를 방출시키는 함수입니다.
    func fetchLocation(completion: @escaping ([DailyPathTimeRequest]) -> Void) {
        do {
            let location = try self.container.viewContext.fetch(Location.fetchRequest())
            
            if location.isEmpty {
                WolleyLog.debug("Fetch 정보가 없습니다.")
                completion([])
                
            } else {
                var data: [DailyPathTimeRequest] = []
                
                location.forEach {
                    let time = $0.time!
                    let coordinate = $0.coordinate!
                    
                    let latitude = coordinate[0].floatValue
                    let longitude = coordinate[1].floatValue
    	 
     
                    data.append(DailyPathTimeRequest(time: time, coordinates: DailyPathCoordinate(latitude: latitude, longitude: longitude)))
                    
                    WolleyLog.debug(time, coordinate)
                }
                
                completion(data)
            }
        } catch {
            WolleyLog.error(error.localizedDescription)
        }
    }
    ```
    

- 이후 클라이언트 부분에서 데이터를 파기합니다.
    
    **로컬 DB 데이터 제거 코드**
    
    ```swift
    /// 로컬 데이터베이스의 모든 정보를 제거하는 함수입니다.
    func removeAllLocation() {
        let request: NSFetchRequest<NSFetchRequestResult> = Location.fetchRequest()
        let delete = NSBatchDeleteRequest(fetchRequest: request)
        
        do {
            try self.container.viewContext.execute(delete)
            WolleyLog.debug("로케이션 데이터 전체 삭제 완료")
            
        } catch {
            WolleyLog.error("로케이션 데이터 전체 삭제 실패")
        }
    }
    ```
    

### 7. 대체 솔루션

Apple에서 앱이 종료 되었을 시에도 작동하는 기능 리스트를 제공합니다.

[Apple Developer Documentation](https://developer.apple.com/documentation/corelocation/getting_the_user_s_location/handling_location_events_in_the_background)

여기서 Yes라고 작성되어있는 서비스의 경우 suspend시에도 위치 추적이 가능한 기능입니다. 해당 플랫폼의 경우 significant-change location service와 region monitoring 기능을 사용하였습니다. Visits service를 활용하는 방법은 구현해보지는 않았지만 suspend 시에 위치 추적을 진행하는 경우 도움이 될 수도 있을 것이라고 생각합니다.

![스크린샷 2022-02-24 오후 4.42.49.png](Suspend%20%E1%84%89%E1%85%A1%2027e45/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-02-24_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_4.42.49.png)

### 8. 주의 사항

- 위치 정보는 앱 전역적으로 사용하는 기능이기에, Location Manager이 View 안에 종속되어있지 않아야 합니다. (해당 앱의 경우 LocationService라는 class를 독립적으로 분리하여 구현하였습니다.)
- 아래 페이지에 기재되어있는 환경이 모두 세팅되어있지 않으면 위치 추적이 정상적으로 동작하지 않을 가능성이 있습니다.
    
    [Wolley - 위치 정보가 정확하게 작동하지 않는 경우는 어떤 경우인가요❓](https://www.notion.so/Wolley-0366e0fc06d349f7afd7b71a6d3ca91f)
